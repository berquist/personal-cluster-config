---
- name: copy over SLURM config
  hosts:
    - submit
    - compute
    - controller
  gather_facts: no
  vars_files:
    - common_variables.yaml

  tasks:
    - name: ensure destination dir exists
      file:
        path: "{{ slurm_conf_dest_dir }}"
        state: directory
        owner: "{{ main_conf_owner }}"
        group: "{{ main_conf_group }}"
    - name: copy slurm.conf
      copy:
        src: "{{ slurm_conf_source_dir }}/slurm.conf"
        dest: "{{ slurm_conf_dest_dir }}"
        owner: "{{ main_conf_owner }}"
        group: "{{ main_conf_group }}"
        mode: "0444"
      register: res_slurm_conf
    - name: generate gres.conf
      shell: |
        set -euo pipefail
        x=0
        for i in $(nvidia-smi -L | awk -F: '{ print tolower($2) }' | \
        sed -e 's/^ geforce//g' -e 's/ //g' -e 's/(.*$//g')
        do
          echo "Name=gpu Type=$i File=/dev/nvidia$((x++))"
        done > {{ slurm_conf_dest_dir }}/gres.conf
        chmod 0444 {{ slurm_conf_dest_dir }}/gres.conf
      when: inventory_hostname in groups['compute']
      register: res_gres_conf
      args:
        executable: /bin/bash
    - name: copy cgroup.conf
      copy:
        src: "{{ slurm_conf_source_dir }}/cgroup.conf"
        dest: "{{ slurm_conf_dest_dir }}"
        owner: "{{ main_conf_owner }}"
        group: "{{ main_conf_group }}"
        mode: "0444"
      when: inventory_hostname not in groups['submit']
      register: res_cgroup_conf
    - name: copy prolog
      copy:
        src: "{{ slurm_conf_source_dir }}/prolog"
        dest: "{{ slurm_conf_dest_dir }}"
        owner: "{{ main_conf_owner }}"
        group: "{{ main_conf_group }}"
        mode: "0755"
      when: inventory_hostname in groups['compute']
    - name: copy task_prolog
      copy:
        src: "{{ slurm_conf_source_dir }}/task_prolog"
        dest: "{{ slurm_conf_dest_dir }}"
        owner: "{{ main_conf_owner }}"
        group: "{{ main_conf_group }}"
        mode: "0755"
      when: inventory_hostname in groups['compute']
    - name: copy epilog_slurmctld
      template:
        src: "{{ slurm_conf_source_dir }}/slurmctld_epilog.j2"
        dest: "{{ slurm_conf_dest_dir }}/slurmctld_epilog"
        owner: "{{ main_conf_owner }}"
        group: "{{ main_conf_group }}"
        mode: "0755"
      when: inventory_hostname in groups['controller']
    - name: ensure compute daemons are started
      service:
        name: slurmd
        state: started
      register: just_started_slurmd
      when: inventory_hostname in groups['compute']
    - name: ensure controller daemons are started
      service:
        name: slurmctld
        state: started
      register: just_started_slurmctld
      when: inventory_hostname in groups['controller']
    - name: restart compute daemons # noqa 503
      service:
        name: slurmd
        state: restarted
      when:
        - res_slurm_conf.changed or res_cgroup_conf.changed or res_gres_conf.changed
        - inventory_hostname in groups['compute']
        - not just_started_slurmd.changed
    - name: restart controller daemons # noqa 503
      service:
        name: slurmctld
        state: restarted
      when:
        - res_slurm_conf.changed or res_cgroup_conf.changed or res_gres_conf.changed
        - inventory_hostname in groups['controller']
        - not just_started_slurmctld.changed

- name: copy over SLURM DB config
  hosts: db
  gather_facts: no
  vars_files:
    - common_variables.yaml

  tasks:
    - name: ensure destination dir exists
      file:
        path: "{{ slurm_conf_dest_dir }}"
        state: directory
        owner: "{{ main_conf_owner }}"
        group: "{{ main_conf_group }}"
    - name: copy slurmdbd.conf
      copy:
        src: "{{ slurm_conf_source_dir }}/slurmdbd.conf"
        dest: "{{ slurm_conf_dest_dir }}"
        owner: slurm
        group: slurm
        mode: "0400"
      register: res_slurmdbd_conf
    - name: ensure db daemon is started
      service:
        name: slurmdbd
        state: started
      register: just_started_slurmdbd
    - name: restart db daemon # noqa 503
      service:
        name: slurmdbd
        state: restarted
      when:
        - res_slurmdbd_conf.changed
        - not just_started_slurmdbd.changed
